/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from '../common';

export type SplitsReceiverStruct = { receiver: string; weight: BigNumberish };

export type SplitsReceiverStructOutput = [string, number] & {
  receiver: string;
  weight: number;
};

export type PermitArgsStruct = {
  nonce: BigNumberish;
  expiry: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type PermitArgsStructOutput = [
  BigNumber,
  BigNumber,
  number,
  string,
  string
] & { nonce: BigNumber; expiry: BigNumber; v: number; r: string; s: string };

export type DripsReceiverStruct = { receiver: string; amtPerSec: BigNumberish };

export type DripsReceiverStructOutput = [string, BigNumber] & {
  receiver: string;
  amtPerSec: BigNumber;
};

export interface DaiDripsHubAbiInterface extends utils.Interface {
  functions: {
    'MAX_DRIPS_RECEIVERS()': FunctionFragment;
    'MAX_SPLITS_RECEIVERS()': FunctionFragment;
    'TOTAL_SPLITS_WEIGHT()': FunctionFragment;
    'admin()': FunctionFragment;
    'changeAdmin(address)': FunctionFragment;
    'collect(address,(address,uint32)[])': FunctionFragment;
    'collectable(address,(address,uint32)[])': FunctionFragment;
    'cycleSecs()': FunctionFragment;
    'dai()': FunctionFragment;
    'dripsHash(address)': FunctionFragment;
    'dripsHash(address,uint256)': FunctionFragment;
    'erc20()': FunctionFragment;
    'flushCycles(address,uint64)': FunctionFragment;
    'flushableCycles(address)': FunctionFragment;
    'give(uint256,address,uint128)': FunctionFragment;
    'give(address,uint128)': FunctionFragment;
    'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment;
    'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment;
    'hashDrips(uint64,uint128,(address,uint128)[])': FunctionFragment;
    'hashSplits((address,uint32)[])': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'reserve()': FunctionFragment;
    'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])': FunctionFragment;
    'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])': FunctionFragment;
    'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment;
    'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment;
    'setReserve(address)': FunctionFragment;
    'setSplits((address,uint32)[],(address,uint32)[])': FunctionFragment;
    'splitsHash(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_DRIPS_RECEIVERS'
      | 'MAX_SPLITS_RECEIVERS'
      | 'TOTAL_SPLITS_WEIGHT'
      | 'admin'
      | 'changeAdmin'
      | 'collect'
      | 'collectable'
      | 'cycleSecs'
      | 'dai'
      | 'dripsHash(address)'
      | 'dripsHash(address,uint256)'
      | 'erc20'
      | 'flushCycles'
      | 'flushableCycles'
      | 'give(uint256,address,uint128)'
      | 'give(address,uint128)'
      | 'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'
      | 'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'
      | 'hashDrips'
      | 'hashSplits'
      | 'pause'
      | 'paused'
      | 'reserve'
      | 'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'
      | 'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'
      | 'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'
      | 'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'
      | 'setReserve'
      | 'setSplits'
      | 'splitsHash'
      | 'unpause'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'MAX_DRIPS_RECEIVERS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_SPLITS_RECEIVERS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'TOTAL_SPLITS_WEIGHT',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeAdmin', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'collect',
    values: [string, SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'collectable',
    values: [string, SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'cycleSecs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dai', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'dripsHash(address)',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'dripsHash(address,uint256)',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'erc20', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flushCycles',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'flushableCycles',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'give(uint256,address,uint128)',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'give(address,uint128)',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))',
    values: [string, BigNumberish, PermitArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))',
    values: [BigNumberish, string, BigNumberish, PermitArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'hashDrips',
    values: [BigNumberish, BigNumberish, DripsReceiverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'hashSplits',
    values: [SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reserve', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      DripsReceiverStruct[],
      BigNumberish,
      DripsReceiverStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])',
    values: [
      BigNumberish,
      BigNumberish,
      DripsReceiverStruct[],
      BigNumberish,
      DripsReceiverStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      DripsReceiverStruct[],
      BigNumberish,
      DripsReceiverStruct[],
      PermitArgsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))',
    values: [
      BigNumberish,
      BigNumberish,
      DripsReceiverStruct[],
      BigNumberish,
      DripsReceiverStruct[],
      PermitArgsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: 'setReserve', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setSplits',
    values: [SplitsReceiverStruct[], SplitsReceiverStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'splitsHash', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: 'MAX_DRIPS_RECEIVERS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_SPLITS_RECEIVERS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'TOTAL_SPLITS_WEIGHT',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'changeAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'collect', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'collectable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'cycleSecs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dai', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dripsHash(address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dripsHash(address,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'erc20', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'flushCycles',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'flushableCycles',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'give(uint256,address,uint128)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'give(address,uint128)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'hashDrips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hashSplits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSplits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splitsHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Collected(address,uint128,uint128)': EventFragment;
    'Dripping(address,address,uint128,uint64)': EventFragment;
    'Dripping(address,uint256,address,uint128,uint64)': EventFragment;
    'DripsUpdated(address,uint256,uint128,(address,uint128)[])': EventFragment;
    'Given(address,address,uint128)': EventFragment;
    'Given1(address,uint256,address,uint128)': EventFragment;
    'Paused(address)': EventFragment;
    'ReserveSet(address,address)': EventFragment;
    'Split(address,address,uint128)': EventFragment;
    'SplitsUpdated(address,tuple[])': EventFragment;
    'Unpaused(address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Collected'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Dripping(address,address,uint128,uint64)'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Dripping(address,uint256,address,uint128,uint64)'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DripsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Given'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Given1'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Split'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SplitsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CollectedEventObject {
  user: string;
  collected: BigNumber;
  split: BigNumber;
}
export type CollectedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface Dripping_address_address_uint128_uint64_EventObject {
  user: string;
  receiver: string;
  amtPerSec: BigNumber;
  endTime: BigNumber;
}
export type Dripping_address_address_uint128_uint64_Event = TypedEvent<
  [string, string, BigNumber, BigNumber],
  Dripping_address_address_uint128_uint64_EventObject
>;

export type Dripping_address_address_uint128_uint64_EventFilter =
  TypedEventFilter<Dripping_address_address_uint128_uint64_Event>;

export interface Dripping_address_uint256_address_uint128_uint64_EventObject {
  user: string;
  account: BigNumber;
  receiver: string;
  amtPerSec: BigNumber;
  endTime: BigNumber;
}
export type Dripping_address_uint256_address_uint128_uint64_Event = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  Dripping_address_uint256_address_uint128_uint64_EventObject
>;

export type Dripping_address_uint256_address_uint128_uint64_EventFilter =
  TypedEventFilter<Dripping_address_uint256_address_uint128_uint64_Event>;

export interface DripsUpdatedEventObject {
  user: string;
  account: BigNumber;
  balance: BigNumber;
  receivers: any[];
}
export type DripsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, any[]],
  DripsUpdatedEventObject
>;

export type DripsUpdatedEventFilter = TypedEventFilter<DripsUpdatedEvent>;

export interface GivenEventObject {
  user: string;
  receiver: string;
  amt: BigNumber;
}
export type GivenEvent = TypedEvent<
  [string, string, BigNumber],
  GivenEventObject
>;

export type GivenEventFilter = TypedEventFilter<GivenEvent>;

export interface Given1EventObject {
  user: string;
  account: BigNumber;
  receiver: string;
  amt: BigNumber;
}
export type Given1Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  Given1EventObject
>;

export type Given1EventFilter = TypedEventFilter<Given1Event>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReserveSetEventObject {
  oldReserve: string;
  newReserve: string;
}
export type ReserveSetEvent = TypedEvent<
  [string, string],
  ReserveSetEventObject
>;

export type ReserveSetEventFilter = TypedEventFilter<ReserveSetEvent>;

export interface SplitEventObject {
  user: string;
  receiver: string;
  amt: BigNumber;
}
export type SplitEvent = TypedEvent<
  [string, string, BigNumber],
  SplitEventObject
>;

export type SplitEventFilter = TypedEventFilter<SplitEvent>;

export interface SplitsUpdatedEventObject {
  user: string;
  receivers: SplitsReceiverStructOutput[];
}
export type SplitsUpdatedEvent = TypedEvent<
  [string, SplitsReceiverStructOutput[]],
  SplitsUpdatedEventObject
>;

export type SplitsUpdatedEventFilter = TypedEventFilter<SplitsUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DaiDripsHubAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaiDripsHubAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DRIPS_RECEIVERS(overrides?: CallOverrides): Promise<[number]>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<[number]>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<[number]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectable(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
    >;

    cycleSecs(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    'dripsHash(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string] & { currDripsHash: string }>;

    'dripsHash(address,uint256)'(
      user: string,
      account: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { currDripsHash: string }>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    flushCycles(
      user: string,
      maxCycles: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flushableCycles(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flushable: BigNumber }>;

    'give(uint256,address,uint128)'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'give(address,uint128)'(
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashDrips(
      update: BigNumberish,
      balance: BigNumberish,
      receivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<[string] & { dripsConfigurationHash: string }>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<[string] & { receiversHash: string }>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPaused: boolean }>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserve(
      newReserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      currReceivers: SplitsReceiverStruct[],
      newReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitsHash(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string] & { currSplitsHash: string }>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_DRIPS_RECEIVERS(overrides?: CallOverrides): Promise<number>;

  MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<number>;

  TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<number>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    user: string,
    currReceivers: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectable(
    user: string,
    currReceivers: SplitsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
  >;

  cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  'dripsHash(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  'dripsHash(address,uint256)'(
    user: string,
    account: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  erc20(overrides?: CallOverrides): Promise<string>;

  flushCycles(
    user: string,
    maxCycles: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flushableCycles(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'give(uint256,address,uint128)'(
    account: BigNumberish,
    receiver: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'give(address,uint128)'(
    receiver: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
    receiver: string,
    amt: BigNumberish,
    permitArgs: PermitArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
    account: BigNumberish,
    receiver: string,
    amt: BigNumberish,
    permitArgs: PermitArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashDrips(
    update: BigNumberish,
    balance: BigNumberish,
    receivers: DripsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  hashSplits(
    receivers: SplitsReceiverStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reserve(overrides?: CallOverrides): Promise<string>;

  'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
    account: BigNumberish,
    lastUpdate: BigNumberish,
    lastBalance: BigNumberish,
    currReceivers: DripsReceiverStruct[],
    balanceDelta: BigNumberish,
    newReceivers: DripsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
    lastUpdate: BigNumberish,
    lastBalance: BigNumberish,
    currReceivers: DripsReceiverStruct[],
    balanceDelta: BigNumberish,
    newReceivers: DripsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
    account: BigNumberish,
    lastUpdate: BigNumberish,
    lastBalance: BigNumberish,
    currReceivers: DripsReceiverStruct[],
    balanceDelta: BigNumberish,
    newReceivers: DripsReceiverStruct[],
    permitArgs: PermitArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
    lastUpdate: BigNumberish,
    lastBalance: BigNumberish,
    currReceivers: DripsReceiverStruct[],
    balanceDelta: BigNumberish,
    newReceivers: DripsReceiverStruct[],
    permitArgs: PermitArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserve(
    newReserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    currReceivers: SplitsReceiverStruct[],
    newReceivers: SplitsReceiverStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitsHash(user: string, overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_DRIPS_RECEIVERS(overrides?: CallOverrides): Promise<number>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<number>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<number>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    collect(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
    >;

    collectable(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
    >;

    cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    'dripsHash(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    'dripsHash(address,uint256)'(
      user: string,
      account: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    erc20(overrides?: CallOverrides): Promise<string>;

    flushCycles(
      user: string,
      maxCycles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flushableCycles(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'give(uint256,address,uint128)'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'give(address,uint128)'(
      receiver: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    hashDrips(
      update: BigNumberish,
      balance: BigNumberish,
      receivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reserve(overrides?: CallOverrides): Promise<string>;

    'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newBalance: BigNumber;
        realBalanceDelta: BigNumber;
      }
    >;

    'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newBalance: BigNumber;
        realBalanceDelta: BigNumber;
      }
    >;

    'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newBalance: BigNumber;
        realBalanceDelta: BigNumber;
      }
    >;

    'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newBalance: BigNumber;
        realBalanceDelta: BigNumber;
      }
    >;

    setReserve(newReserve: string, overrides?: CallOverrides): Promise<void>;

    setSplits(
      currReceivers: SplitsReceiverStruct[],
      newReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { collected: BigNumber; split: BigNumber }
    >;

    splitsHash(user: string, overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'Collected(address,uint128,uint128)'(
      user?: string | null,
      collected?: null,
      split?: null
    ): CollectedEventFilter;
    Collected(
      user?: string | null,
      collected?: null,
      split?: null
    ): CollectedEventFilter;

    'Dripping(address,address,uint128,uint64)'(
      user?: string | null,
      receiver?: string | null,
      amtPerSec?: null,
      endTime?: null
    ): Dripping_address_address_uint128_uint64_EventFilter;
    'Dripping(address,uint256,address,uint128,uint64)'(
      user?: string | null,
      account?: BigNumberish | null,
      receiver?: string | null,
      amtPerSec?: null,
      endTime?: null
    ): Dripping_address_uint256_address_uint128_uint64_EventFilter;

    'DripsUpdated(address,uint256,uint128,(address,uint128)[])'(
      user?: string | null,
      account?: BigNumberish | null,
      balance?: null,
      receivers?: null
    ): DripsUpdatedEventFilter;
    DripsUpdated(
      user?: string | null,
      account?: BigNumberish | null,
      balance?: null,
      receivers?: null
    ): DripsUpdatedEventFilter;

    'Given(address,address,uint128)'(
      user?: string | null,
      receiver?: string | null,
      amt?: null
    ): GivenEventFilter;
    Given(
      user?: string | null,
      receiver?: string | null,
      amt?: null
    ): GivenEventFilter;

    'Given1(address,uint256,address,uint128)'(
      user?: string | null,
      account?: BigNumberish | null,
      receiver?: string | null,
      amt?: null
    ): Given1EventFilter;
    Given1(
      user?: string | null,
      account?: BigNumberish | null,
      receiver?: string | null,
      amt?: null
    ): Given1EventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'ReserveSet(address,address)'(
      oldReserve?: null,
      newReserve?: null
    ): ReserveSetEventFilter;
    ReserveSet(oldReserve?: null, newReserve?: null): ReserveSetEventFilter;

    'Split(address,address,uint128)'(
      user?: string | null,
      receiver?: string | null,
      amt?: null
    ): SplitEventFilter;
    Split(
      user?: string | null,
      receiver?: string | null,
      amt?: null
    ): SplitEventFilter;

    'SplitsUpdated(address,tuple[])'(
      user?: string | null,
      receivers?: null
    ): SplitsUpdatedEventFilter;
    SplitsUpdated(
      user?: string | null,
      receivers?: null
    ): SplitsUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    MAX_DRIPS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SPLITS_RECEIVERS(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SPLITS_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectable(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleSecs(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    'dripsHash(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'dripsHash(address,uint256)'(
      user: string,
      account: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    flushCycles(
      user: string,
      maxCycles: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flushableCycles(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'give(uint256,address,uint128)'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'give(address,uint128)'(
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashDrips(
      update: BigNumberish,
      balance: BigNumberish,
      receivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserve(
      newReserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      currReceivers: SplitsReceiverStruct[],
      newReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitsHash(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DRIPS_RECEIVERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SPLITS_RECEIVERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_SPLITS_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectable(
      user: string,
      currReceivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'dripsHash(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'dripsHash(address,uint256)'(
      user: string,
      account: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flushCycles(
      user: string,
      maxCycles: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flushableCycles(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'give(uint256,address,uint128)'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'give(address,uint128)'(
      receiver: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'giveAndPermit(address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'giveAndPermit(uint256,address,uint128,(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      receiver: string,
      amt: BigNumberish,
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashDrips(
      update: BigNumberish,
      balance: BigNumberish,
      receivers: DripsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashSplits(
      receivers: SplitsReceiverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'setDrips(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setDrips(uint64,uint128,(address,uint128)[],int128,(address,uint128)[])'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setDripsAndPermit(uint256,uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      account: BigNumberish,
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setDripsAndPermit(uint64,uint128,(address,uint128)[],int128,(address,uint128)[],(uint256,uint256,uint8,bytes32,bytes32))'(
      lastUpdate: BigNumberish,
      lastBalance: BigNumberish,
      currReceivers: DripsReceiverStruct[],
      balanceDelta: BigNumberish,
      newReceivers: DripsReceiverStruct[],
      permitArgs: PermitArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserve(
      newReserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      currReceivers: SplitsReceiverStruct[],
      newReceivers: SplitsReceiverStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitsHash(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
